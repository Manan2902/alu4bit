
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/manan/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/alu4bit/src/alu4bit.v
Parsing SystemVerilog input from `/openlane/designs/alu4bit/src/alu4bit.v' to AST representation.
Storing AST representation for module `$abstract\alu4bit'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\alu4bit'.
Generating RTLIL representation for module `\alu4bit'.

4.1. Analyzing design hierarchy..
Top module:  \alu4bit

4.2. Analyzing design hierarchy..
Top module:  \alu4bit
Removing unused module `$abstract\alu4bit'.
Removed 1 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/alu4bit/runs/Final/tmp/synthesis/hierarchy.dot'.
Dumping module alu4bit to page 1.
Renaming module alu4bit to alu4bit.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \alu4bit

7.2. Analyzing design hierarchy..
Top module:  \alu4bit
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/openlane/designs/alu4bit/src/alu4bit.v:11$1 in module alu4bit.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/alu4bit/src/alu4bit.v:11$1 in module alu4bit.
Removed a total of 1 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 3 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\alu4bit.$proc$/openlane/designs/alu4bit/src/alu4bit.v:11$1'.
     1/2: $1\carry_out[0:0]
     2/2: $1\result[3:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\alu4bit.\result' using process `\alu4bit.$proc$/openlane/designs/alu4bit/src/alu4bit.v:11$1'.
  created $dff cell `$procdff$33' with positive edge clock.
Creating register for signal `\alu4bit.\carry_out' using process `\alu4bit.$proc$/openlane/designs/alu4bit/src/alu4bit.v:11$1'.
  created $dff cell `$procdff$34' with positive edge clock.
Creating register for signal `\alu4bit.\zero' using process `\alu4bit.$proc$/openlane/designs/alu4bit/src/alu4bit.v:11$1'.
  created $dff cell `$procdff$35' with positive edge clock.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\alu4bit.$proc$/openlane/designs/alu4bit/src/alu4bit.v:11$1'.
Removing empty process `alu4bit.$proc$/openlane/designs/alu4bit/src/alu4bit.v:11$1'.
Cleaned up 1 empty switch.

19. Executing CHECK pass (checking for obvious problems).
Checking module alu4bit...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.
<suppressed ~3 debug messages>

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu4bit.
    New ctrl vector for $pmux cell $procmux$15: { $procmux$23_CMP $procmux$22_CMP $auto$opt_reduce.cc:134:opt_pmux$37 }
  Optimizing cells in module \alu4bit.
Performed a total of 1 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu4bit.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu4bit.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$34 ($dff) from module alu4bit (D = $0\carry_out[0:0], Q = \carry_out).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.
<suppressed ~2 debug messages>

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu4bit.
    New ctrl vector for $pmux cell $procmux$15: { $procmux$23_CMP $procmux$22_CMP }
  Optimizing cells in module \alu4bit.
Performed a total of 1 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.

26.16. Rerunning OPT passes. (Maybe there is more to do..)

26.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

26.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu4bit.
Performed a total of 0 changes.

26.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
Removed a total of 0 cells.

26.20. Executing OPT_DFF pass (perform DFF optimizations).

26.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..

26.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.

26.23. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell alu4bit.$procmux$20_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell alu4bit.$procmux$21_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell alu4bit.$procmux$22_CMP0 ($eq).

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu4bit:
  creating $macc model for $add$/openlane/designs/alu4bit/src/alu4bit.v:13$2 ($add).
  creating $macc model for $sub$/openlane/designs/alu4bit/src/alu4bit.v:14$3 ($sub).
  creating $alu model for $macc $sub$/openlane/designs/alu4bit/src/alu4bit.v:14$3.
  creating $alu model for $macc $add$/openlane/designs/alu4bit/src/alu4bit.v:13$2.
  creating $alu cell for $add$/openlane/designs/alu4bit/src/alu4bit.v:13$2: $auto$alumacc.cc:485:replace_alu$41
  creating $alu cell for $sub$/openlane/designs/alu4bit/src/alu4bit.v:14$3: $auto$alumacc.cc:485:replace_alu$44
  created 2 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu4bit.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.

32.9. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.
<suppressed ~3 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu4bit.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.

37.10. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using template $paramod$b85fbb3374a1d9ba7ee4f4d6323c30f939df3ada\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$33afdd83bf3811dac2de7a968d39eea5718691bc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~292 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.
<suppressed ~51 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
<suppressed ~72 debug messages>
Removed a total of 24 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..
Removed 4 unused cells and 117 unused wires.
<suppressed ~5 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\alu4bit' to `<abc-temp-dir>/input.blif'..
Extracted 152 gates and 163 wires to a netlist network with 11 inputs and 7 outputs.

40.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:        5
ABC RESULTS:              XNOR cells:        5
ABC RESULTS:               XOR cells:        6
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:               AND cells:       13
ABC RESULTS:               NOR cells:        7
ABC RESULTS:            ANDNOT cells:       45
ABC RESULTS:                OR cells:       34
ABC RESULTS:               MUX cells:        5
ABC RESULTS:        internal signals:      145
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        7
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..
Removed 0 unused cells and 72 unused wires.
<suppressed ~1 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \alu4bit

42.2. Analyzing design hierarchy..
Top module:  \alu4bit
Removed 0 unused modules.

43. Printing statistics.

=== alu4bit ===

   Number of wires:                130
   Number of wire bits:            144
   Number of public wires:           7
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                132
     $_ANDNOT_                      45
     $_AND_                         13
     $_DFFE_PN_                      1
     $_DFF_P_                        5
     $_MUX_                          5
     $_NAND_                         1
     $_NOR_                          7
     $_NOT_                          5
     $_ORNOT_                        6
     $_OR_                          34
     $_XNOR_                         4
     $_XOR_                          6

44. Executing CHECK pass (checking for obvious problems).
Checking module alu4bit...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/alu4bit/runs/Final/tmp/synthesis/post_techmap.dot'.
Dumping module alu4bit to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu4bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu4bit.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu4bit'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu4bit.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..

49. Printing statistics.

=== alu4bit ===

   Number of wires:                130
   Number of wire bits:            144
   Number of public wires:           7
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                132
     $_ANDNOT_                      45
     $_AND_                         13
     $_DFFE_PN_                      1
     $_DFF_P_                        5
     $_MUX_                          5
     $_NAND_                         1
     $_NOR_                          7
     $_NOT_                          5
     $_ORNOT_                        6
     $_OR_                          34
     $_XNOR_                         4
     $_XOR_                          6

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/manan/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/manan/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/manan/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/manan/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu4bit':
  mapped 6 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

55. Printing statistics.

=== alu4bit ===

   Number of wires:                131
   Number of wire bits:            145
   Number of public wires:           7
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     $_ANDNOT_                      45
     $_AND_                         13
     $_MUX_                          6
     $_NAND_                         1
     $_NOR_                          7
     $_NOT_                          5
     $_ORNOT_                        6
     $_OR_                          34
     $_XNOR_                         4
     $_XOR_                          6
     sky130_fd_sc_hd__dfxtp_2        6

[INFO]: USING STRATEGY AREA 3

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\alu4bit' to `/tmp/yosys-abc-LeiiGt/input.blif'..
Extracted 127 gates and 139 wires to a netlist network with 12 inputs and 6 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-LeiiGt/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-LeiiGt/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-LeiiGt/input.blif 
ABC: + read_lib -w /openlane/designs/alu4bit/runs/Final/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/alu4bit/runs/Final/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.04 sec
ABC: Memory =    9.54 MB. Time =     0.04 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/alu4bit/runs/Final/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/alu4bit/runs/Final/tmp/synthesis/synthesis.sdc 
ABC: + strash 
ABC: + dch 
ABC: + map -B 0.9 
ABC: The cell delays are multiplied by the factor: <num_fanins> ^ (0.90).
ABC: + topo 
ABC: + stime -c 
ABC: WireLoad = "Small"  Gates =    117 ( 14.5 %)   Cap = 10.3 ff (  1.8 %)   Area =      814.53 ( 85.5 %)   Delay =  1449.15 ps  ( 36.8 %)               
ABC: + buffer -c -N 10 
ABC: + upsize -c 
ABC: + dnsize -c 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    117 ( 14.5 %)   Cap = 11.2 ff (  9.4 %)   Area =      922.13 ( 69.2 %)   Delay =  1113.09 ps  ( 35.9 %)               
ABC: Path  0 --       3 : 0    9 pi                       A =   0.00  Df = 141.4  -76.2 ps  S = 207.1 ps  Cin =  0.0 ff  Cout =  44.4 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      38 : 1    2 sky130_fd_sc_hd__inv_4   A =   6.26  Df = 199.5  -54.3 ps  S =  53.1 ps  Cin =  9.0 ff  Cout =  14.0 ff  Cmax = 563.1 ff  G =  147  
ABC: Path  2 --      41 : 2    3 sky130_fd_sc_hd__nand2_4 A =  11.26  Df = 279.6  -75.7 ps  S =  63.1 ps  Cin =  8.7 ff  Cout =  14.1 ff  Cmax = 530.1 ff  G =  153  
ABC: Path  3 --      42 : 2    5 sky130_fd_sc_hd__nor2_2  A =   6.26  Df = 422.2  -77.2 ps  S = 249.3 ps  Cin =  4.4 ff  Cout =  21.1 ff  Cmax = 141.9 ff  G =  459  
ABC: Path  4 --      43 : 2    1 sky130_fd_sc_hd__nor2b_4 A =  13.76  Df = 632.3 -154.4 ps  S =  91.4 ps  Cin =  5.5 ff  Cout =   9.3 ff  Cmax = 254.5 ff  G =  157  
ABC: Path  5 --      44 : 2    1 sky130_fd_sc_hd__nor2_4  A =  11.26  Df = 673.6 -107.4 ps  S =  88.3 ps  Cin =  8.7 ff  Cout =   8.9 ff  Cmax = 251.8 ff  G =   98  
ABC: Path  6 --      48 : 3    2 sky130_fd_sc_hd__nand3_4 A =  17.52  Df = 855.6 -135.9 ps  S = 163.1 ps  Cin =  8.7 ff  Cout =  42.6 ff  Cmax = 469.7 ff  G =  486  
ABC: Path  7 --     125 : 2    1 sky130_fd_sc_hd__nor2_4  A =  11.26  Df = 916.6  -42.3 ps  S =  96.9 ps  Cin =  8.7 ff  Cout =   8.8 ff  Cmax = 251.8 ff  G =   98  
ABC: Path  8 --     126 : 2    1 sky130_fd_sc_hd__nand2_4 A =  11.26  Df = 991.6  -47.2 ps  S =  73.6 ps  Cin =  8.7 ff  Cout =  17.9 ff  Cmax = 530.1 ff  G =  195  
ABC: Path  9 --     127 : 2    1 sky130_fd_sc_hd__nor2_8  A =  20.02  Df =1113.1  -26.2 ps  S = 155.3 ps  Cin = 16.9 ff  Cout =  33.4 ff  Cmax = 433.1 ff  G =  197  
ABC: Start-point = pi2 (\control [2]).  End-point = po4 ($0\zero[0:0]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   12/    6  lat =    0  nd =   117  edge =    253  area =922.32  delay =610.55  lev = 11
ABC: + write_blif /tmp/yosys-abc-LeiiGt/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2b_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2_4 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_4 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand2_4 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__nor2_8 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       38
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__a31oi_4 cells:        1
ABC RESULTS:        internal signals:      121
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        6
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu4bit..
Removed 0 unused cells and 139 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module alu4bit...
Found and reported 0 problems.

63. Printing statistics.

=== alu4bit ===

   Number of wires:                124
   Number of wire bits:            135
   Number of public wires:           7
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                123
     sky130_fd_sc_hd__a21o_2         1
     sky130_fd_sc_hd__a21oi_2        2
     sky130_fd_sc_hd__a21oi_4        1
     sky130_fd_sc_hd__a31oi_2        1
     sky130_fd_sc_hd__a31oi_4        1
     sky130_fd_sc_hd__dfxtp_2        6
     sky130_fd_sc_hd__inv_2         15
     sky130_fd_sc_hd__inv_4          2
     sky130_fd_sc_hd__nand2_2       38
     sky130_fd_sc_hd__nand2_4        6
     sky130_fd_sc_hd__nand2b_2       1
     sky130_fd_sc_hd__nand3_2       14
     sky130_fd_sc_hd__nand3_4        2
     sky130_fd_sc_hd__nand3b_2       2
     sky130_fd_sc_hd__nor2_2        14
     sky130_fd_sc_hd__nor2_4         3
     sky130_fd_sc_hd__nor2_8         1
     sky130_fd_sc_hd__nor2b_4        1
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__o2111a_2       1
     sky130_fd_sc_hd__o21ai_2        6
     sky130_fd_sc_hd__or2_4          3
     sky130_fd_sc_hd__or2b_2         1

   Chip area for module '\alu4bit': 1049.756800

64. Executing Verilog backend.
Dumping module `\alu4bit'.

65. Executing JSON backend.

End of script. Logfile hash: 8c21a06664, CPU: user 0.26s system 0.02s, MEM: 42.62 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 35% 2x abc (0 sec), 22% 2x read_liberty (0 sec), ...
